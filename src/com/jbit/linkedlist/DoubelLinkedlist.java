package com.jbit.linkedlist;/** * 双向链表操作 */public class DoubelLinkedlist {    public static void main(String[] args) {        HerdNode heroNode = new HerdNode(1,"宋江","及时雨");        HerdNode heroNode2 = new HerdNode(2,"林冲","豹子头");        HerdNode heroNode3 = new HerdNode(3,"卢俊义","玉麒麟");        HerdNode heroNode4 = new HerdNode(4,"吴用","智多星");        Util util = new Util();        util.add(heroNode);        util.add(heroNode4);        util.add(heroNode2);        util.add(heroNode3);        System.out.println("修改前");        util.list();        System.out.println("修改后");        HerdNode heroNodes = new HerdNode(1,"宋江","及时雨ssss");        util.update(heroNodes);        util.list();        System.out.println("删除前");        util.list();        System.out.println("删除后");        util.delete(2);        util.list();    }    /**     * 工具类     */    static class Util{        //头部节点        HerdNode herd = new HerdNode(0,"","");        public HerdNode getHerd(){            return herd;        }        /**         * 遍历双向链表         */        public void list(){            if(herd.next == null){                return;            }            //创建辅助节点            HerdNode temp = herd.next;            while(true){                //判断是否为最后一个                if(temp == null){                    break;                }                System.out.println(temp);                temp = temp.next;            }        }        /**         * 将数据添加到链表末尾         * @param herdNode         */        public void add(HerdNode herdNode){            //创建辅助节点            HerdNode temp = herd;            while(true){                if(temp.next == null){                    break;                }                //找到最后一个节点                temp= temp.next;            }            temp.next = herdNode;            herdNode.pre=temp;        }        /**         * 修改链表中数据         * @param herdNode         */        public void update(HerdNode herdNode){            if(herd.next == null){                System.out.println("双向链表中没有数据");                return;            }            //定义辅助变量            HerdNode temp = herd;            while(true){                if(temp.next == null){                    break;                }else if(temp.next.no == herdNode.no){                    temp = temp.next;                    break;                }                temp = temp.next;            }            temp.name = herdNode.name;            temp.nikeName = herdNode.nikeName;        }        /**         *         * @param no         */        public void delete(int no){           if(herd.next == null){               System.out.println("链表中无可删除数据");               return;           }           //头部节点           HerdNode temp = herd.next;           while(true){               if(temp.no == no){                   break;               }               temp = temp.next;           }           //进行自我删除           temp.pre.next = temp.next;        }    }    static class HerdNode{        //编号        public int no;        public String name;        public String nikeName;        public HerdNode next;        public HerdNode pre;        /**         * 带参构造方法         * @param no         * @param name         * @param nikeName         */        HerdNode(int no,String name,String nikeName){            this.no = no;            this.name = name;            this.nikeName = nikeName;        }        @Override        public String toString() {            return "HerdNode{" +                    "no=" + no +                    ", name='" + name + '\'' +                    ", nikeName='" + nikeName + '\'' +                    '}';        }    }}